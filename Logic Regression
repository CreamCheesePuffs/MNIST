import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("/tmp/data/", one_hot=True)

mini_batch = 100
learning_rate = 0.01
epochs = 25

x = tf.placeholder(tf.float32, [None, 784])
y = tf.placeholder(tf.float32, [None, 10])

w = tf.Variable(tf.zeros([784, 10]))
b = tf.Variable(tf.zeros([1, 10]))

y_ = tf.add(tf.matmul(x, w), b)

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=y_))

init = tf.initialize_all_variables()

train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(cross_entropy)

with tf.Session() as sess:
    sess.run(init)
    total_batch = int(mnist.train.num_examples/mini_batch)
    for each in range(epochs):
        ave_cost = 0
        for i in range(total_batch):
            batch_x, batch_y = mnist.train.next_batch(mini_batch)
            _, cost = sess.run([train_step, cross_entropy], feed_dict = {x:batch_x, y:batch_y})
            ave_cost += cost/total_batch
        print("Epoch:%d, cost:%f" %(each, ave_cost))
    correct_predict = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
    accuracy = tf.reduce_mean(tf.cast(correct_predict, tf.float32))
    print(sess.run(accuracy, feed_dict = {x:mnist.test.images, y:mnist.test.labels}))



